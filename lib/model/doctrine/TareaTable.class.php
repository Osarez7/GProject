<?php

/**
 * TareaTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TareaTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object TareaTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Tarea');
    }

    public function arbolPorProyectoQuery($idProyecto) {

        $q = Doctrine_Query::create()
                ->select('t.*')
                ->from('Tarea t')
                ->orderBy('t.level ASC')
                ->where('proyectoFK=?', $idProyecto)
        ;
        return $q;
    }

    public function getArbolTareas($idProyecto) {

        $q = Doctrine_Query::create()
                ->select('t.*')
                ->from('Tarea t')
                ->orderBy('t.level ASC')
                ->where('proyectoFK=?', $idProyecto)
                ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

        $treeObject = Doctrine_Core::getTable('Tarea')->getTree();
        $treeObject->setBaseQuery($q);
        $tree = $treeObject->fetchTree();
        $treeObject->resetBaseQuery();
        return $tree;
    }

 
    public function getTreeTaskAsArray($idProyecto) {

        $q = Doctrine_Query::create()
                ->select('t.*')
                ->from('Tarea t')
                ->orderBy('t.level ASC')
                ->where('proyectoFK=?', $idProyecto);
  
        $treeObject = Doctrine_Core::getTable('Tarea')->getTree();
        $treeObject->setBaseQuery($q);
       // $treeObject->fetchTree();
        
        $tree = array('children' =>$this->getArbolArray($treeObject));
        $tree = $this->evalHasChildren($tree ['children'],$tree );
                   
       $treeObject->resetBaseQuery();
       
       return $tree;
    }

    public function getArbolArray($treeObject) {
        
        $lstArrayTareas = array();    
        
        foreach ($treeObject->fetchRoots() as $root) {
           
           $tareaRoot = $root->toArray();        
           $tareaRoot['children'] = $this->getArrayDesendientes($root);
           $tareaRoot = $this
             ->evalHasChildren($tareaRoot['children'],$tareaRoot);
                    
           array_push($lstArrayTareas, $tareaRoot);
        }
             
        return $lstArrayTareas;
    }


   private function evalHasChildren($lstChildren,$arrayTarea){
   	
     if(count($lstChildren)>0){
 	$arrayTarea['hasChildren'] = true;
 	}else{
           $arrayTarea['hasChildren'] = false;
       }

        return $arrayTarea;
    }

   public function getArrayDesendientes($tareaNode){
              
           $lstTareas = array();
           foreach ($tareaNode->getNode()->getChildren() as $tarea) {
           
          //$this->ancestors = $node->getNode()->getAncestors()->toArray();
                $arrayHijo =  $tarea->toArray();                 
 
                if($tarea->getNode()->hasChildren()){
                 
                 $arrayHijo['children'] =  $this->getArrayDesendientes($tarea);
                 $arrayHijo['hasChildren'] = true; 
               }else{

                $arrayHijo['hasChildren'] = false;
                 }
              
                array_push($lstTareas,$arrayHijo);

                //echo strj_repeat(' ', $node['level']) . $node['name'] . "\n";
                
              
            }
      
             return $lstTareas;
         }

    public function getQueryArbolTarea($id) {
        $q = Doctrine_Query::create()
                ->select('t.*')
                ->from('Tarea t')
//->where('t.proyectoFK = ?',$id)
                ->orderBy('t.level ASC');

        return $q;
    }

    public function getUsuarioTarea($idUsuario) {
        $tareas = Doctrine_Query::create()
                ->from('Tarea t')
                ->leftJoin('t.Usuario us')
// ->innerJoin('us.usuario u')
                ->where('us.idUsuario=?', $idUsuario)
                ->execute();

        return $tareas;
    }

    public function getTareasPendientesPorUsuario($idUsuario) {

        $tareas = Doctrine_Query::create()
                ->from('Tarea t')
                ->leftJoin('t.Usuario us')
                ->leftJoin('t.Status st')
                ->where('us.idUsuario=?', $idUsuario)
// ->andWhere('st.nombreStatus','Pendiente')
                ->execute();

        return $tareas;
    }

    public function getArbolCojuntoTareas($lstIdTareas) {

        $tree = array();

        if (count($lstIdTareas) > 0 && !in_array("", $lstIdTareas)) {

            $q = Doctrine_Query::create()
                    ->select('t.*')
                    ->from('Tarea t')
                    ->orderBy('t.level ASC')
                    ->whereIn('t.idTarea', $lstIdTareas)
                    ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);

            $treeObject = Doctrine_Core::getTable('Tarea')->getTree();
            $treeObject->setBaseQuery($q);
            $tree = $treeObject->fetchTree();

            $treeObject->resetBaseQuery();
        }

        return $tree;
    }

    public function addChild($idTarea) {

        $tareaPadre = $this->find($idTarea);
        $tareaPadre->getNode();
    }

    public function findOneById($idTarea) {

        $tarea = Doctrine_Query::create()
                        ->from('Tarea t')
                        ->where('t.idTarea', $idTarea)
                        ->execute()->getFirst();

        return $tarea;
    }

    
      public function findOneArrayById($idTarea) {

        $tarea = Doctrine_Query::create()
                        ->from('Tarea t')
                        ->where('t.idTarea', $idTarea)
                         //->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY)
                        ->execute()->getFirst();
        //$tarea =   array_shift( $tareas );
         $tareaArray = $tarea->toArray();
        return  $tareaArray;
    }
}
